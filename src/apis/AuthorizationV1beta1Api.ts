/* tslint:disable */
/* eslint-disable */
/**
 * Kubernetes
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.18.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    V1APIResourceList,
    V1APIResourceListFromJSON,
    V1APIResourceListToJSON,
    V1beta1LocalSubjectAccessReview,
    V1beta1LocalSubjectAccessReviewFromJSON,
    V1beta1LocalSubjectAccessReviewToJSON,
    V1beta1SelfSubjectAccessReview,
    V1beta1SelfSubjectAccessReviewFromJSON,
    V1beta1SelfSubjectAccessReviewToJSON,
    V1beta1SelfSubjectRulesReview,
    V1beta1SelfSubjectRulesReviewFromJSON,
    V1beta1SelfSubjectRulesReviewToJSON,
    V1beta1SubjectAccessReview,
    V1beta1SubjectAccessReviewFromJSON,
    V1beta1SubjectAccessReviewToJSON,
} from '../models';

export interface CreateNamespacedLocalSubjectAccessReviewRequest {
    namespace: string;
    body: V1beta1LocalSubjectAccessReview;
    dryRun?: string;
    fieldManager?: string;
    pretty?: string;
}

export interface CreateSelfSubjectAccessReviewRequest {
    body: V1beta1SelfSubjectAccessReview;
    dryRun?: string;
    fieldManager?: string;
    pretty?: string;
}

export interface CreateSelfSubjectRulesReviewRequest {
    body: V1beta1SelfSubjectRulesReview;
    dryRun?: string;
    fieldManager?: string;
    pretty?: string;
}

export interface CreateSubjectAccessReviewRequest {
    body: V1beta1SubjectAccessReview;
    dryRun?: string;
    fieldManager?: string;
    pretty?: string;
}

/**
 * 
 */
export class AuthorizationV1beta1Api extends runtime.BaseAPI {

    /**
     * create a LocalSubjectAccessReview
     */
    async createNamespacedLocalSubjectAccessReviewRaw(requestParameters: CreateNamespacedLocalSubjectAccessReviewRequest): Promise<runtime.ApiResponse<V1beta1LocalSubjectAccessReview>> {
        if (requestParameters.namespace === null || requestParameters.namespace === undefined) {
            throw new runtime.RequiredError('namespace','Required parameter requestParameters.namespace was null or undefined when calling createNamespacedLocalSubjectAccessReview.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling createNamespacedLocalSubjectAccessReview.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/authorization.k8s.io/v1beta1/namespaces/{namespace}/localsubjectaccessreviews`.replace(`{${"namespace"}}`, encodeURIComponent(String(requestParameters.namespace))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: V1beta1LocalSubjectAccessReviewToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => V1beta1LocalSubjectAccessReviewFromJSON(jsonValue));
    }

    /**
     * create a LocalSubjectAccessReview
     */
    async createNamespacedLocalSubjectAccessReview(requestParameters: CreateNamespacedLocalSubjectAccessReviewRequest): Promise<V1beta1LocalSubjectAccessReview> {
        const response = await this.createNamespacedLocalSubjectAccessReviewRaw(requestParameters);
        return await response.value();
    }

    /**
     * create a SelfSubjectAccessReview
     */
    async createSelfSubjectAccessReviewRaw(requestParameters: CreateSelfSubjectAccessReviewRequest): Promise<runtime.ApiResponse<V1beta1SelfSubjectAccessReview>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling createSelfSubjectAccessReview.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/authorization.k8s.io/v1beta1/selfsubjectaccessreviews`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: V1beta1SelfSubjectAccessReviewToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => V1beta1SelfSubjectAccessReviewFromJSON(jsonValue));
    }

    /**
     * create a SelfSubjectAccessReview
     */
    async createSelfSubjectAccessReview(requestParameters: CreateSelfSubjectAccessReviewRequest): Promise<V1beta1SelfSubjectAccessReview> {
        const response = await this.createSelfSubjectAccessReviewRaw(requestParameters);
        return await response.value();
    }

    /**
     * create a SelfSubjectRulesReview
     */
    async createSelfSubjectRulesReviewRaw(requestParameters: CreateSelfSubjectRulesReviewRequest): Promise<runtime.ApiResponse<V1beta1SelfSubjectRulesReview>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling createSelfSubjectRulesReview.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/authorization.k8s.io/v1beta1/selfsubjectrulesreviews`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: V1beta1SelfSubjectRulesReviewToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => V1beta1SelfSubjectRulesReviewFromJSON(jsonValue));
    }

    /**
     * create a SelfSubjectRulesReview
     */
    async createSelfSubjectRulesReview(requestParameters: CreateSelfSubjectRulesReviewRequest): Promise<V1beta1SelfSubjectRulesReview> {
        const response = await this.createSelfSubjectRulesReviewRaw(requestParameters);
        return await response.value();
    }

    /**
     * create a SubjectAccessReview
     */
    async createSubjectAccessReviewRaw(requestParameters: CreateSubjectAccessReviewRequest): Promise<runtime.ApiResponse<V1beta1SubjectAccessReview>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling createSubjectAccessReview.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/authorization.k8s.io/v1beta1/subjectaccessreviews`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: V1beta1SubjectAccessReviewToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => V1beta1SubjectAccessReviewFromJSON(jsonValue));
    }

    /**
     * create a SubjectAccessReview
     */
    async createSubjectAccessReview(requestParameters: CreateSubjectAccessReviewRequest): Promise<V1beta1SubjectAccessReview> {
        const response = await this.createSubjectAccessReviewRaw(requestParameters);
        return await response.value();
    }

    /**
     * get available resources
     */
    async getAPIResourcesRaw(): Promise<runtime.ApiResponse<V1APIResourceList>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/authorization.k8s.io/v1beta1/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => V1APIResourceListFromJSON(jsonValue));
    }

    /**
     * get available resources
     */
    async getAPIResources(): Promise<V1APIResourceList> {
        const response = await this.getAPIResourcesRaw();
        return await response.value();
    }

}
