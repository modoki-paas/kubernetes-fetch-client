/* tslint:disable */
/* eslint-disable */
/**
 * Kubernetes
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.18.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    V1APIResourceList,
    V1APIResourceListFromJSON,
    V1APIResourceListToJSON,
    V1DeleteOptions,
    V1DeleteOptionsFromJSON,
    V1DeleteOptionsToJSON,
    V1Status,
    V1StatusFromJSON,
    V1StatusToJSON,
    V1alpha1FlowSchema,
    V1alpha1FlowSchemaFromJSON,
    V1alpha1FlowSchemaToJSON,
    V1alpha1FlowSchemaList,
    V1alpha1FlowSchemaListFromJSON,
    V1alpha1FlowSchemaListToJSON,
    V1alpha1PriorityLevelConfiguration,
    V1alpha1PriorityLevelConfigurationFromJSON,
    V1alpha1PriorityLevelConfigurationToJSON,
    V1alpha1PriorityLevelConfigurationList,
    V1alpha1PriorityLevelConfigurationListFromJSON,
    V1alpha1PriorityLevelConfigurationListToJSON,
} from '../models';

export interface CreateFlowSchemaRequest {
    body: V1alpha1FlowSchema;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
}

export interface CreatePriorityLevelConfigurationRequest {
    body: V1alpha1PriorityLevelConfiguration;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
}

export interface DeleteCollectionFlowSchemaRequest {
    pretty?: string;
    _continue?: string;
    dryRun?: string;
    fieldSelector?: string;
    gracePeriodSeconds?: number;
    labelSelector?: string;
    limit?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
    resourceVersion?: string;
    timeoutSeconds?: number;
    body?: V1DeleteOptions;
}

export interface DeleteCollectionPriorityLevelConfigurationRequest {
    pretty?: string;
    _continue?: string;
    dryRun?: string;
    fieldSelector?: string;
    gracePeriodSeconds?: number;
    labelSelector?: string;
    limit?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
    resourceVersion?: string;
    timeoutSeconds?: number;
    body?: V1DeleteOptions;
}

export interface DeleteFlowSchemaRequest {
    name: string;
    pretty?: string;
    dryRun?: string;
    gracePeriodSeconds?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
    body?: V1DeleteOptions;
}

export interface DeletePriorityLevelConfigurationRequest {
    name: string;
    pretty?: string;
    dryRun?: string;
    gracePeriodSeconds?: number;
    orphanDependents?: boolean;
    propagationPolicy?: string;
    body?: V1DeleteOptions;
}

export interface ListFlowSchemaRequest {
    pretty?: string;
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    resourceVersion?: string;
    timeoutSeconds?: number;
    watch?: boolean;
}

export interface ListPriorityLevelConfigurationRequest {
    pretty?: string;
    allowWatchBookmarks?: boolean;
    _continue?: string;
    fieldSelector?: string;
    labelSelector?: string;
    limit?: number;
    resourceVersion?: string;
    timeoutSeconds?: number;
    watch?: boolean;
}

export interface PatchFlowSchemaRequest {
    name: string;
    body: object;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    force?: boolean;
}

export interface PatchFlowSchemaStatusRequest {
    name: string;
    body: object;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    force?: boolean;
}

export interface PatchPriorityLevelConfigurationRequest {
    name: string;
    body: object;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    force?: boolean;
}

export interface PatchPriorityLevelConfigurationStatusRequest {
    name: string;
    body: object;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
    force?: boolean;
}

export interface ReadFlowSchemaRequest {
    name: string;
    pretty?: string;
    exact?: boolean;
    _export?: boolean;
}

export interface ReadFlowSchemaStatusRequest {
    name: string;
    pretty?: string;
}

export interface ReadPriorityLevelConfigurationRequest {
    name: string;
    pretty?: string;
    exact?: boolean;
    _export?: boolean;
}

export interface ReadPriorityLevelConfigurationStatusRequest {
    name: string;
    pretty?: string;
}

export interface ReplaceFlowSchemaRequest {
    name: string;
    body: V1alpha1FlowSchema;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
}

export interface ReplaceFlowSchemaStatusRequest {
    name: string;
    body: V1alpha1FlowSchema;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
}

export interface ReplacePriorityLevelConfigurationRequest {
    name: string;
    body: V1alpha1PriorityLevelConfiguration;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
}

export interface ReplacePriorityLevelConfigurationStatusRequest {
    name: string;
    body: V1alpha1PriorityLevelConfiguration;
    pretty?: string;
    dryRun?: string;
    fieldManager?: string;
}

/**
 * 
 */
export class FlowcontrolApiserverV1alpha1Api extends runtime.BaseAPI {

    /**
     * create a FlowSchema
     */
    async createFlowSchemaRaw(requestParameters: CreateFlowSchemaRequest): Promise<runtime.ApiResponse<V1alpha1FlowSchema>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling createFlowSchema.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/flowcontrol.apiserver.k8s.io/v1alpha1/flowschemas`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: V1alpha1FlowSchemaToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => V1alpha1FlowSchemaFromJSON(jsonValue));
    }

    /**
     * create a FlowSchema
     */
    async createFlowSchema(requestParameters: CreateFlowSchemaRequest): Promise<V1alpha1FlowSchema> {
        const response = await this.createFlowSchemaRaw(requestParameters);
        return await response.value();
    }

    /**
     * create a PriorityLevelConfiguration
     */
    async createPriorityLevelConfigurationRaw(requestParameters: CreatePriorityLevelConfigurationRequest): Promise<runtime.ApiResponse<V1alpha1PriorityLevelConfiguration>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling createPriorityLevelConfiguration.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/flowcontrol.apiserver.k8s.io/v1alpha1/prioritylevelconfigurations`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: V1alpha1PriorityLevelConfigurationToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => V1alpha1PriorityLevelConfigurationFromJSON(jsonValue));
    }

    /**
     * create a PriorityLevelConfiguration
     */
    async createPriorityLevelConfiguration(requestParameters: CreatePriorityLevelConfigurationRequest): Promise<V1alpha1PriorityLevelConfiguration> {
        const response = await this.createPriorityLevelConfigurationRaw(requestParameters);
        return await response.value();
    }

    /**
     * delete collection of FlowSchema
     */
    async deleteCollectionFlowSchemaRaw(requestParameters: DeleteCollectionFlowSchemaRequest): Promise<runtime.ApiResponse<V1Status>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.gracePeriodSeconds !== undefined) {
            queryParameters['gracePeriodSeconds'] = requestParameters.gracePeriodSeconds;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.orphanDependents !== undefined) {
            queryParameters['orphanDependents'] = requestParameters.orphanDependents;
        }

        if (requestParameters.propagationPolicy !== undefined) {
            queryParameters['propagationPolicy'] = requestParameters.propagationPolicy;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/flowcontrol.apiserver.k8s.io/v1alpha1/flowschemas`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: V1DeleteOptionsToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => V1StatusFromJSON(jsonValue));
    }

    /**
     * delete collection of FlowSchema
     */
    async deleteCollectionFlowSchema(requestParameters: DeleteCollectionFlowSchemaRequest): Promise<V1Status> {
        const response = await this.deleteCollectionFlowSchemaRaw(requestParameters);
        return await response.value();
    }

    /**
     * delete collection of PriorityLevelConfiguration
     */
    async deleteCollectionPriorityLevelConfigurationRaw(requestParameters: DeleteCollectionPriorityLevelConfigurationRequest): Promise<runtime.ApiResponse<V1Status>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.gracePeriodSeconds !== undefined) {
            queryParameters['gracePeriodSeconds'] = requestParameters.gracePeriodSeconds;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.orphanDependents !== undefined) {
            queryParameters['orphanDependents'] = requestParameters.orphanDependents;
        }

        if (requestParameters.propagationPolicy !== undefined) {
            queryParameters['propagationPolicy'] = requestParameters.propagationPolicy;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/flowcontrol.apiserver.k8s.io/v1alpha1/prioritylevelconfigurations`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: V1DeleteOptionsToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => V1StatusFromJSON(jsonValue));
    }

    /**
     * delete collection of PriorityLevelConfiguration
     */
    async deleteCollectionPriorityLevelConfiguration(requestParameters: DeleteCollectionPriorityLevelConfigurationRequest): Promise<V1Status> {
        const response = await this.deleteCollectionPriorityLevelConfigurationRaw(requestParameters);
        return await response.value();
    }

    /**
     * delete a FlowSchema
     */
    async deleteFlowSchemaRaw(requestParameters: DeleteFlowSchemaRequest): Promise<runtime.ApiResponse<V1Status>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling deleteFlowSchema.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.gracePeriodSeconds !== undefined) {
            queryParameters['gracePeriodSeconds'] = requestParameters.gracePeriodSeconds;
        }

        if (requestParameters.orphanDependents !== undefined) {
            queryParameters['orphanDependents'] = requestParameters.orphanDependents;
        }

        if (requestParameters.propagationPolicy !== undefined) {
            queryParameters['propagationPolicy'] = requestParameters.propagationPolicy;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/flowcontrol.apiserver.k8s.io/v1alpha1/flowschemas/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: V1DeleteOptionsToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => V1StatusFromJSON(jsonValue));
    }

    /**
     * delete a FlowSchema
     */
    async deleteFlowSchema(requestParameters: DeleteFlowSchemaRequest): Promise<V1Status> {
        const response = await this.deleteFlowSchemaRaw(requestParameters);
        return await response.value();
    }

    /**
     * delete a PriorityLevelConfiguration
     */
    async deletePriorityLevelConfigurationRaw(requestParameters: DeletePriorityLevelConfigurationRequest): Promise<runtime.ApiResponse<V1Status>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling deletePriorityLevelConfiguration.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.gracePeriodSeconds !== undefined) {
            queryParameters['gracePeriodSeconds'] = requestParameters.gracePeriodSeconds;
        }

        if (requestParameters.orphanDependents !== undefined) {
            queryParameters['orphanDependents'] = requestParameters.orphanDependents;
        }

        if (requestParameters.propagationPolicy !== undefined) {
            queryParameters['propagationPolicy'] = requestParameters.propagationPolicy;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/flowcontrol.apiserver.k8s.io/v1alpha1/prioritylevelconfigurations/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: V1DeleteOptionsToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => V1StatusFromJSON(jsonValue));
    }

    /**
     * delete a PriorityLevelConfiguration
     */
    async deletePriorityLevelConfiguration(requestParameters: DeletePriorityLevelConfigurationRequest): Promise<V1Status> {
        const response = await this.deletePriorityLevelConfigurationRaw(requestParameters);
        return await response.value();
    }

    /**
     * get available resources
     */
    async getAPIResourcesRaw(): Promise<runtime.ApiResponse<V1APIResourceList>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/flowcontrol.apiserver.k8s.io/v1alpha1/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => V1APIResourceListFromJSON(jsonValue));
    }

    /**
     * get available resources
     */
    async getAPIResources(): Promise<V1APIResourceList> {
        const response = await this.getAPIResourcesRaw();
        return await response.value();
    }

    /**
     * list or watch objects of kind FlowSchema
     */
    async listFlowSchemaRaw(requestParameters: ListFlowSchemaRequest): Promise<runtime.ApiResponse<V1alpha1FlowSchemaList>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/flowcontrol.apiserver.k8s.io/v1alpha1/flowschemas`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => V1alpha1FlowSchemaListFromJSON(jsonValue));
    }

    /**
     * list or watch objects of kind FlowSchema
     */
    async listFlowSchema(requestParameters: ListFlowSchemaRequest): Promise<V1alpha1FlowSchemaList> {
        const response = await this.listFlowSchemaRaw(requestParameters);
        return await response.value();
    }

    /**
     * list or watch objects of kind PriorityLevelConfiguration
     */
    async listPriorityLevelConfigurationRaw(requestParameters: ListPriorityLevelConfigurationRequest): Promise<runtime.ApiResponse<V1alpha1PriorityLevelConfigurationList>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.allowWatchBookmarks !== undefined) {
            queryParameters['allowWatchBookmarks'] = requestParameters.allowWatchBookmarks;
        }

        if (requestParameters._continue !== undefined) {
            queryParameters['continue'] = requestParameters._continue;
        }

        if (requestParameters.fieldSelector !== undefined) {
            queryParameters['fieldSelector'] = requestParameters.fieldSelector;
        }

        if (requestParameters.labelSelector !== undefined) {
            queryParameters['labelSelector'] = requestParameters.labelSelector;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.resourceVersion !== undefined) {
            queryParameters['resourceVersion'] = requestParameters.resourceVersion;
        }

        if (requestParameters.timeoutSeconds !== undefined) {
            queryParameters['timeoutSeconds'] = requestParameters.timeoutSeconds;
        }

        if (requestParameters.watch !== undefined) {
            queryParameters['watch'] = requestParameters.watch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/flowcontrol.apiserver.k8s.io/v1alpha1/prioritylevelconfigurations`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => V1alpha1PriorityLevelConfigurationListFromJSON(jsonValue));
    }

    /**
     * list or watch objects of kind PriorityLevelConfiguration
     */
    async listPriorityLevelConfiguration(requestParameters: ListPriorityLevelConfigurationRequest): Promise<V1alpha1PriorityLevelConfigurationList> {
        const response = await this.listPriorityLevelConfigurationRaw(requestParameters);
        return await response.value();
    }

    /**
     * partially update the specified FlowSchema
     */
    async patchFlowSchemaRaw(requestParameters: PatchFlowSchemaRequest): Promise<runtime.ApiResponse<V1alpha1FlowSchema>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling patchFlowSchema.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling patchFlowSchema.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        if (requestParameters.force !== undefined) {
            queryParameters['force'] = requestParameters.force;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/flowcontrol.apiserver.k8s.io/v1alpha1/flowschemas/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => V1alpha1FlowSchemaFromJSON(jsonValue));
    }

    /**
     * partially update the specified FlowSchema
     */
    async patchFlowSchema(requestParameters: PatchFlowSchemaRequest): Promise<V1alpha1FlowSchema> {
        const response = await this.patchFlowSchemaRaw(requestParameters);
        return await response.value();
    }

    /**
     * partially update status of the specified FlowSchema
     */
    async patchFlowSchemaStatusRaw(requestParameters: PatchFlowSchemaStatusRequest): Promise<runtime.ApiResponse<V1alpha1FlowSchema>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling patchFlowSchemaStatus.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling patchFlowSchemaStatus.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        if (requestParameters.force !== undefined) {
            queryParameters['force'] = requestParameters.force;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/flowcontrol.apiserver.k8s.io/v1alpha1/flowschemas/{name}/status`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => V1alpha1FlowSchemaFromJSON(jsonValue));
    }

    /**
     * partially update status of the specified FlowSchema
     */
    async patchFlowSchemaStatus(requestParameters: PatchFlowSchemaStatusRequest): Promise<V1alpha1FlowSchema> {
        const response = await this.patchFlowSchemaStatusRaw(requestParameters);
        return await response.value();
    }

    /**
     * partially update the specified PriorityLevelConfiguration
     */
    async patchPriorityLevelConfigurationRaw(requestParameters: PatchPriorityLevelConfigurationRequest): Promise<runtime.ApiResponse<V1alpha1PriorityLevelConfiguration>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling patchPriorityLevelConfiguration.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling patchPriorityLevelConfiguration.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        if (requestParameters.force !== undefined) {
            queryParameters['force'] = requestParameters.force;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/flowcontrol.apiserver.k8s.io/v1alpha1/prioritylevelconfigurations/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => V1alpha1PriorityLevelConfigurationFromJSON(jsonValue));
    }

    /**
     * partially update the specified PriorityLevelConfiguration
     */
    async patchPriorityLevelConfiguration(requestParameters: PatchPriorityLevelConfigurationRequest): Promise<V1alpha1PriorityLevelConfiguration> {
        const response = await this.patchPriorityLevelConfigurationRaw(requestParameters);
        return await response.value();
    }

    /**
     * partially update status of the specified PriorityLevelConfiguration
     */
    async patchPriorityLevelConfigurationStatusRaw(requestParameters: PatchPriorityLevelConfigurationStatusRequest): Promise<runtime.ApiResponse<V1alpha1PriorityLevelConfiguration>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling patchPriorityLevelConfigurationStatus.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling patchPriorityLevelConfigurationStatus.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        if (requestParameters.force !== undefined) {
            queryParameters['force'] = requestParameters.force;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/flowcontrol.apiserver.k8s.io/v1alpha1/prioritylevelconfigurations/{name}/status`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => V1alpha1PriorityLevelConfigurationFromJSON(jsonValue));
    }

    /**
     * partially update status of the specified PriorityLevelConfiguration
     */
    async patchPriorityLevelConfigurationStatus(requestParameters: PatchPriorityLevelConfigurationStatusRequest): Promise<V1alpha1PriorityLevelConfiguration> {
        const response = await this.patchPriorityLevelConfigurationStatusRaw(requestParameters);
        return await response.value();
    }

    /**
     * read the specified FlowSchema
     */
    async readFlowSchemaRaw(requestParameters: ReadFlowSchemaRequest): Promise<runtime.ApiResponse<V1alpha1FlowSchema>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling readFlowSchema.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.exact !== undefined) {
            queryParameters['exact'] = requestParameters.exact;
        }

        if (requestParameters._export !== undefined) {
            queryParameters['export'] = requestParameters._export;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/flowcontrol.apiserver.k8s.io/v1alpha1/flowschemas/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => V1alpha1FlowSchemaFromJSON(jsonValue));
    }

    /**
     * read the specified FlowSchema
     */
    async readFlowSchema(requestParameters: ReadFlowSchemaRequest): Promise<V1alpha1FlowSchema> {
        const response = await this.readFlowSchemaRaw(requestParameters);
        return await response.value();
    }

    /**
     * read status of the specified FlowSchema
     */
    async readFlowSchemaStatusRaw(requestParameters: ReadFlowSchemaStatusRequest): Promise<runtime.ApiResponse<V1alpha1FlowSchema>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling readFlowSchemaStatus.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/flowcontrol.apiserver.k8s.io/v1alpha1/flowschemas/{name}/status`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => V1alpha1FlowSchemaFromJSON(jsonValue));
    }

    /**
     * read status of the specified FlowSchema
     */
    async readFlowSchemaStatus(requestParameters: ReadFlowSchemaStatusRequest): Promise<V1alpha1FlowSchema> {
        const response = await this.readFlowSchemaStatusRaw(requestParameters);
        return await response.value();
    }

    /**
     * read the specified PriorityLevelConfiguration
     */
    async readPriorityLevelConfigurationRaw(requestParameters: ReadPriorityLevelConfigurationRequest): Promise<runtime.ApiResponse<V1alpha1PriorityLevelConfiguration>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling readPriorityLevelConfiguration.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.exact !== undefined) {
            queryParameters['exact'] = requestParameters.exact;
        }

        if (requestParameters._export !== undefined) {
            queryParameters['export'] = requestParameters._export;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/flowcontrol.apiserver.k8s.io/v1alpha1/prioritylevelconfigurations/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => V1alpha1PriorityLevelConfigurationFromJSON(jsonValue));
    }

    /**
     * read the specified PriorityLevelConfiguration
     */
    async readPriorityLevelConfiguration(requestParameters: ReadPriorityLevelConfigurationRequest): Promise<V1alpha1PriorityLevelConfiguration> {
        const response = await this.readPriorityLevelConfigurationRaw(requestParameters);
        return await response.value();
    }

    /**
     * read status of the specified PriorityLevelConfiguration
     */
    async readPriorityLevelConfigurationStatusRaw(requestParameters: ReadPriorityLevelConfigurationStatusRequest): Promise<runtime.ApiResponse<V1alpha1PriorityLevelConfiguration>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling readPriorityLevelConfigurationStatus.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/flowcontrol.apiserver.k8s.io/v1alpha1/prioritylevelconfigurations/{name}/status`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => V1alpha1PriorityLevelConfigurationFromJSON(jsonValue));
    }

    /**
     * read status of the specified PriorityLevelConfiguration
     */
    async readPriorityLevelConfigurationStatus(requestParameters: ReadPriorityLevelConfigurationStatusRequest): Promise<V1alpha1PriorityLevelConfiguration> {
        const response = await this.readPriorityLevelConfigurationStatusRaw(requestParameters);
        return await response.value();
    }

    /**
     * replace the specified FlowSchema
     */
    async replaceFlowSchemaRaw(requestParameters: ReplaceFlowSchemaRequest): Promise<runtime.ApiResponse<V1alpha1FlowSchema>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling replaceFlowSchema.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling replaceFlowSchema.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/flowcontrol.apiserver.k8s.io/v1alpha1/flowschemas/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: V1alpha1FlowSchemaToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => V1alpha1FlowSchemaFromJSON(jsonValue));
    }

    /**
     * replace the specified FlowSchema
     */
    async replaceFlowSchema(requestParameters: ReplaceFlowSchemaRequest): Promise<V1alpha1FlowSchema> {
        const response = await this.replaceFlowSchemaRaw(requestParameters);
        return await response.value();
    }

    /**
     * replace status of the specified FlowSchema
     */
    async replaceFlowSchemaStatusRaw(requestParameters: ReplaceFlowSchemaStatusRequest): Promise<runtime.ApiResponse<V1alpha1FlowSchema>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling replaceFlowSchemaStatus.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling replaceFlowSchemaStatus.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/flowcontrol.apiserver.k8s.io/v1alpha1/flowschemas/{name}/status`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: V1alpha1FlowSchemaToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => V1alpha1FlowSchemaFromJSON(jsonValue));
    }

    /**
     * replace status of the specified FlowSchema
     */
    async replaceFlowSchemaStatus(requestParameters: ReplaceFlowSchemaStatusRequest): Promise<V1alpha1FlowSchema> {
        const response = await this.replaceFlowSchemaStatusRaw(requestParameters);
        return await response.value();
    }

    /**
     * replace the specified PriorityLevelConfiguration
     */
    async replacePriorityLevelConfigurationRaw(requestParameters: ReplacePriorityLevelConfigurationRequest): Promise<runtime.ApiResponse<V1alpha1PriorityLevelConfiguration>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling replacePriorityLevelConfiguration.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling replacePriorityLevelConfiguration.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/flowcontrol.apiserver.k8s.io/v1alpha1/prioritylevelconfigurations/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: V1alpha1PriorityLevelConfigurationToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => V1alpha1PriorityLevelConfigurationFromJSON(jsonValue));
    }

    /**
     * replace the specified PriorityLevelConfiguration
     */
    async replacePriorityLevelConfiguration(requestParameters: ReplacePriorityLevelConfigurationRequest): Promise<V1alpha1PriorityLevelConfiguration> {
        const response = await this.replacePriorityLevelConfigurationRaw(requestParameters);
        return await response.value();
    }

    /**
     * replace status of the specified PriorityLevelConfiguration
     */
    async replacePriorityLevelConfigurationStatusRaw(requestParameters: ReplacePriorityLevelConfigurationStatusRequest): Promise<runtime.ApiResponse<V1alpha1PriorityLevelConfiguration>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling replacePriorityLevelConfigurationStatus.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling replacePriorityLevelConfigurationStatus.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pretty !== undefined) {
            queryParameters['pretty'] = requestParameters.pretty;
        }

        if (requestParameters.dryRun !== undefined) {
            queryParameters['dryRun'] = requestParameters.dryRun;
        }

        if (requestParameters.fieldManager !== undefined) {
            queryParameters['fieldManager'] = requestParameters.fieldManager;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["authorization"] = this.configuration.apiKey("authorization"); // BearerToken authentication
        }

        const response = await this.request({
            path: `/apis/flowcontrol.apiserver.k8s.io/v1alpha1/prioritylevelconfigurations/{name}/status`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: V1alpha1PriorityLevelConfigurationToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => V1alpha1PriorityLevelConfigurationFromJSON(jsonValue));
    }

    /**
     * replace status of the specified PriorityLevelConfiguration
     */
    async replacePriorityLevelConfigurationStatus(requestParameters: ReplacePriorityLevelConfigurationStatusRequest): Promise<V1alpha1PriorityLevelConfiguration> {
        const response = await this.replacePriorityLevelConfigurationStatusRaw(requestParameters);
        return await response.value();
    }

}
