/* tslint:disable */
/* eslint-disable */
/**
 * Kubernetes
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.18.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * ManagedFieldsEntry is a workflow-id, a FieldSet and the group version of the resource that the fieldset applies to.
 * @export
 * @interface V1ManagedFieldsEntry
 */
export interface V1ManagedFieldsEntry {
    /**
     * APIVersion defines the version of this resource that this field set applies to. The format is "group/version" just like the top-level APIVersion field. It is necessary to track the version of a field set because it cannot be automatically converted.
     * @type {string}
     * @memberof V1ManagedFieldsEntry
     */
    apiVersion?: string;
    /**
     * FieldsType is the discriminator for the different fields format and version. There is currently only one possible value: "FieldsV1"
     * @type {string}
     * @memberof V1ManagedFieldsEntry
     */
    fieldsType?: string;
    /**
     * FieldsV1 holds the first JSON version format as described in the "FieldsV1" type.
     * @type {object}
     * @memberof V1ManagedFieldsEntry
     */
    fieldsV1?: object;
    /**
     * Manager is an identifier of the workflow managing these fields.
     * @type {string}
     * @memberof V1ManagedFieldsEntry
     */
    manager?: string;
    /**
     * Operation is the type of operation which lead to this ManagedFieldsEntry being created. The only valid values for this field are 'Apply' and 'Update'.
     * @type {string}
     * @memberof V1ManagedFieldsEntry
     */
    operation?: string;
    /**
     * Time is timestamp of when these fields were set. It should always be empty if Operation is 'Apply'
     * @type {Date}
     * @memberof V1ManagedFieldsEntry
     */
    time?: Date;
}

export function V1ManagedFieldsEntryFromJSON(json: any): V1ManagedFieldsEntry {
    return V1ManagedFieldsEntryFromJSONTyped(json, false);
}

export function V1ManagedFieldsEntryFromJSONTyped(json: any, ignoreDiscriminator: boolean): V1ManagedFieldsEntry {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'apiVersion': !exists(json, 'apiVersion') ? undefined : json['apiVersion'],
        'fieldsType': !exists(json, 'fieldsType') ? undefined : json['fieldsType'],
        'fieldsV1': !exists(json, 'fieldsV1') ? undefined : json['fieldsV1'],
        'manager': !exists(json, 'manager') ? undefined : json['manager'],
        'operation': !exists(json, 'operation') ? undefined : json['operation'],
        'time': !exists(json, 'time') ? undefined : (new Date(json['time'])),
    };
}

export function V1ManagedFieldsEntryToJSON(value?: V1ManagedFieldsEntry | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'apiVersion': value.apiVersion,
        'fieldsType': value.fieldsType,
        'fieldsV1': value.fieldsV1,
        'manager': value.manager,
        'operation': value.operation,
        'time': value.time === undefined ? undefined : (value.time.toISOString()),
    };
}


