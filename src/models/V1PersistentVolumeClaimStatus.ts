/* tslint:disable */
/* eslint-disable */
/**
 * Kubernetes
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.18.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    V1PersistentVolumeClaimCondition,
    V1PersistentVolumeClaimConditionFromJSON,
    V1PersistentVolumeClaimConditionFromJSONTyped,
    V1PersistentVolumeClaimConditionToJSON,
} from './';

/**
 * PersistentVolumeClaimStatus is the current status of a persistent volume claim.
 * @export
 * @interface V1PersistentVolumeClaimStatus
 */
export interface V1PersistentVolumeClaimStatus {
    /**
     * AccessModes contains the actual access modes the volume backing the PVC has. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
     * @type {Array<string>}
     * @memberof V1PersistentVolumeClaimStatus
     */
    accessModes?: Array<string>;
    /**
     * Represents the actual resources of the underlying volume.
     * @type {{ [key: string]: string; }}
     * @memberof V1PersistentVolumeClaimStatus
     */
    capacity?: { [key: string]: string; };
    /**
     * Current Condition of persistent volume claim. If underlying persistent volume is being resized then the Condition will be set to 'ResizeStarted'.
     * @type {Array<V1PersistentVolumeClaimCondition>}
     * @memberof V1PersistentVolumeClaimStatus
     */
    conditions?: Array<V1PersistentVolumeClaimCondition>;
    /**
     * Phase represents the current phase of PersistentVolumeClaim.
     * @type {string}
     * @memberof V1PersistentVolumeClaimStatus
     */
    phase?: string;
}

export function V1PersistentVolumeClaimStatusFromJSON(json: any): V1PersistentVolumeClaimStatus {
    return V1PersistentVolumeClaimStatusFromJSONTyped(json, false);
}

export function V1PersistentVolumeClaimStatusFromJSONTyped(json: any, ignoreDiscriminator: boolean): V1PersistentVolumeClaimStatus {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'accessModes': !exists(json, 'accessModes') ? undefined : json['accessModes'],
        'capacity': !exists(json, 'capacity') ? undefined : json['capacity'],
        'conditions': !exists(json, 'conditions') ? undefined : ((json['conditions'] as Array<any>).map(V1PersistentVolumeClaimConditionFromJSON)),
        'phase': !exists(json, 'phase') ? undefined : json['phase'],
    };
}

export function V1PersistentVolumeClaimStatusToJSON(value?: V1PersistentVolumeClaimStatus | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'accessModes': value.accessModes,
        'capacity': value.capacity,
        'conditions': value.conditions === undefined ? undefined : ((value.conditions as Array<any>).map(V1PersistentVolumeClaimConditionToJSON)),
        'phase': value.phase,
    };
}


