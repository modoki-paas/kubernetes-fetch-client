/* tslint:disable */
/* eslint-disable */
/**
 * Kubernetes
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.18.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    V1alpha1LimitResponse,
    V1alpha1LimitResponseFromJSON,
    V1alpha1LimitResponseFromJSONTyped,
    V1alpha1LimitResponseToJSON,
} from './';

/**
 * LimitedPriorityLevelConfiguration specifies how to handle requests that are subject to limits. It addresses two issues:
 *  * How are requests for this priority level limited?
 *  * What should be done with requests that exceed the limit?
 * @export
 * @interface V1alpha1LimitedPriorityLevelConfiguration
 */
export interface V1alpha1LimitedPriorityLevelConfiguration {
    /**
     * `assuredConcurrencyShares` (ACS) configures the execution limit, which is a limit on the number of requests of this priority level that may be exeucting at a given time.  ACS must be a positive number. The server's concurrency limit (SCL) is divided among the concurrency-controlled priority levels in proportion to their assured concurrency shares. This produces the assured concurrency value (ACV) --- the number of requests that may be executing at a time --- for each such priority level:
     * 
     *             ACV(l) = ceil( SCL * ACS(l) / ( sum[priority levels k] ACS(k) ) )
     * 
     * bigger numbers of ACS mean more reserved concurrent requests (at the expense of every other PL). This field has a default value of 30.
     * @type {number}
     * @memberof V1alpha1LimitedPriorityLevelConfiguration
     */
    assuredConcurrencyShares?: number;
    /**
     * 
     * @type {V1alpha1LimitResponse}
     * @memberof V1alpha1LimitedPriorityLevelConfiguration
     */
    limitResponse?: V1alpha1LimitResponse;
}

export function V1alpha1LimitedPriorityLevelConfigurationFromJSON(json: any): V1alpha1LimitedPriorityLevelConfiguration {
    return V1alpha1LimitedPriorityLevelConfigurationFromJSONTyped(json, false);
}

export function V1alpha1LimitedPriorityLevelConfigurationFromJSONTyped(json: any, ignoreDiscriminator: boolean): V1alpha1LimitedPriorityLevelConfiguration {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'assuredConcurrencyShares': !exists(json, 'assuredConcurrencyShares') ? undefined : json['assuredConcurrencyShares'],
        'limitResponse': !exists(json, 'limitResponse') ? undefined : V1alpha1LimitResponseFromJSON(json['limitResponse']),
    };
}

export function V1alpha1LimitedPriorityLevelConfigurationToJSON(value?: V1alpha1LimitedPriorityLevelConfiguration | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'assuredConcurrencyShares': value.assuredConcurrencyShares,
        'limitResponse': V1alpha1LimitResponseToJSON(value.limitResponse),
    };
}


