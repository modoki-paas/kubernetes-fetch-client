/* tslint:disable */
/* eslint-disable */
/**
 * Kubernetes
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.18.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * ServiceReference holds a reference to Service.legacy.k8s.io
 * @export
 * @interface V1alpha1ServiceReference
 */
export interface V1alpha1ServiceReference {
    /**
     * `name` is the name of the service. Required
     * @type {string}
     * @memberof V1alpha1ServiceReference
     */
    name: string;
    /**
     * `namespace` is the namespace of the service. Required
     * @type {string}
     * @memberof V1alpha1ServiceReference
     */
    namespace: string;
    /**
     * `path` is an optional URL path which will be sent in any request to this service.
     * @type {string}
     * @memberof V1alpha1ServiceReference
     */
    path?: string;
    /**
     * If specified, the port on the service that hosting webhook. Default to 443 for backward compatibility. `port` should be a valid port number (1-65535, inclusive).
     * @type {number}
     * @memberof V1alpha1ServiceReference
     */
    port?: number;
}

export function V1alpha1ServiceReferenceFromJSON(json: any): V1alpha1ServiceReference {
    return V1alpha1ServiceReferenceFromJSONTyped(json, false);
}

export function V1alpha1ServiceReferenceFromJSONTyped(json: any, ignoreDiscriminator: boolean): V1alpha1ServiceReference {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'name': json['name'],
        'namespace': json['namespace'],
        'path': !exists(json, 'path') ? undefined : json['path'],
        'port': !exists(json, 'port') ? undefined : json['port'],
    };
}

export function V1alpha1ServiceReferenceToJSON(value?: V1alpha1ServiceReference | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'name': value.name,
        'namespace': value.namespace,
        'path': value.path,
        'port': value.port,
    };
}


