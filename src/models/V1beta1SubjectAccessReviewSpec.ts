/* tslint:disable */
/* eslint-disable */
/**
 * Kubernetes
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.18.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    V1beta1NonResourceAttributes,
    V1beta1NonResourceAttributesFromJSON,
    V1beta1NonResourceAttributesFromJSONTyped,
    V1beta1NonResourceAttributesToJSON,
    V1beta1ResourceAttributes,
    V1beta1ResourceAttributesFromJSON,
    V1beta1ResourceAttributesFromJSONTyped,
    V1beta1ResourceAttributesToJSON,
} from './';

/**
 * SubjectAccessReviewSpec is a description of the access request.  Exactly one of ResourceAuthorizationAttributes and NonResourceAuthorizationAttributes must be set
 * @export
 * @interface V1beta1SubjectAccessReviewSpec
 */
export interface V1beta1SubjectAccessReviewSpec {
    /**
     * Extra corresponds to the user.Info.GetExtra() method from the authenticator.  Since that is input to the authorizer it needs a reflection here.
     * @type {{ [key: string]: Array<string>; }}
     * @memberof V1beta1SubjectAccessReviewSpec
     */
    extra?: { [key: string]: Array<string>; };
    /**
     * Groups is the groups you're testing for.
     * @type {Array<string>}
     * @memberof V1beta1SubjectAccessReviewSpec
     */
    group?: Array<string>;
    /**
     * 
     * @type {V1beta1NonResourceAttributes}
     * @memberof V1beta1SubjectAccessReviewSpec
     */
    nonResourceAttributes?: V1beta1NonResourceAttributes;
    /**
     * 
     * @type {V1beta1ResourceAttributes}
     * @memberof V1beta1SubjectAccessReviewSpec
     */
    resourceAttributes?: V1beta1ResourceAttributes;
    /**
     * UID information about the requesting user.
     * @type {string}
     * @memberof V1beta1SubjectAccessReviewSpec
     */
    uid?: string;
    /**
     * User is the user you're testing for. If you specify "User" but not "Group", then is it interpreted as "What if User were not a member of any groups
     * @type {string}
     * @memberof V1beta1SubjectAccessReviewSpec
     */
    user?: string;
}

export function V1beta1SubjectAccessReviewSpecFromJSON(json: any): V1beta1SubjectAccessReviewSpec {
    return V1beta1SubjectAccessReviewSpecFromJSONTyped(json, false);
}

export function V1beta1SubjectAccessReviewSpecFromJSONTyped(json: any, ignoreDiscriminator: boolean): V1beta1SubjectAccessReviewSpec {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'extra': !exists(json, 'extra') ? undefined : json['extra'],
        'group': !exists(json, 'group') ? undefined : json['group'],
        'nonResourceAttributes': !exists(json, 'nonResourceAttributes') ? undefined : V1beta1NonResourceAttributesFromJSON(json['nonResourceAttributes']),
        'resourceAttributes': !exists(json, 'resourceAttributes') ? undefined : V1beta1ResourceAttributesFromJSON(json['resourceAttributes']),
        'uid': !exists(json, 'uid') ? undefined : json['uid'],
        'user': !exists(json, 'user') ? undefined : json['user'],
    };
}

export function V1beta1SubjectAccessReviewSpecToJSON(value?: V1beta1SubjectAccessReviewSpec | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'extra': value.extra,
        'group': value.group,
        'nonResourceAttributes': V1beta1NonResourceAttributesToJSON(value.nonResourceAttributes),
        'resourceAttributes': V1beta1ResourceAttributesToJSON(value.resourceAttributes),
        'uid': value.uid,
        'user': value.user,
    };
}


