/* tslint:disable */
/* eslint-disable */
/**
 * Kubernetes
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.18.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    V1beta1NonResourceRule,
    V1beta1NonResourceRuleFromJSON,
    V1beta1NonResourceRuleFromJSONTyped,
    V1beta1NonResourceRuleToJSON,
    V1beta1ResourceRule,
    V1beta1ResourceRuleFromJSON,
    V1beta1ResourceRuleFromJSONTyped,
    V1beta1ResourceRuleToJSON,
} from './';

/**
 * SubjectRulesReviewStatus contains the result of a rules check. This check can be incomplete depending on the set of authorizers the server is configured with and any errors experienced during evaluation. Because authorization rules are additive, if a rule appears in a list it's safe to assume the subject has that permission, even if that list is incomplete.
 * @export
 * @interface V1beta1SubjectRulesReviewStatus
 */
export interface V1beta1SubjectRulesReviewStatus {
    /**
     * EvaluationError can appear in combination with Rules. It indicates an error occurred during rule evaluation, such as an authorizer that doesn't support rule evaluation, and that ResourceRules and/or NonResourceRules may be incomplete.
     * @type {string}
     * @memberof V1beta1SubjectRulesReviewStatus
     */
    evaluationError?: string;
    /**
     * Incomplete is true when the rules returned by this call are incomplete. This is most commonly encountered when an authorizer, such as an external authorizer, doesn't support rules evaluation.
     * @type {boolean}
     * @memberof V1beta1SubjectRulesReviewStatus
     */
    incomplete: boolean;
    /**
     * NonResourceRules is the list of actions the subject is allowed to perform on non-resources. The list ordering isn't significant, may contain duplicates, and possibly be incomplete.
     * @type {Array<V1beta1NonResourceRule>}
     * @memberof V1beta1SubjectRulesReviewStatus
     */
    nonResourceRules: Array<V1beta1NonResourceRule>;
    /**
     * ResourceRules is the list of actions the subject is allowed to perform on resources. The list ordering isn't significant, may contain duplicates, and possibly be incomplete.
     * @type {Array<V1beta1ResourceRule>}
     * @memberof V1beta1SubjectRulesReviewStatus
     */
    resourceRules: Array<V1beta1ResourceRule>;
}

export function V1beta1SubjectRulesReviewStatusFromJSON(json: any): V1beta1SubjectRulesReviewStatus {
    return V1beta1SubjectRulesReviewStatusFromJSONTyped(json, false);
}

export function V1beta1SubjectRulesReviewStatusFromJSONTyped(json: any, ignoreDiscriminator: boolean): V1beta1SubjectRulesReviewStatus {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'evaluationError': !exists(json, 'evaluationError') ? undefined : json['evaluationError'],
        'incomplete': json['incomplete'],
        'nonResourceRules': ((json['nonResourceRules'] as Array<any>).map(V1beta1NonResourceRuleFromJSON)),
        'resourceRules': ((json['resourceRules'] as Array<any>).map(V1beta1ResourceRuleFromJSON)),
    };
}

export function V1beta1SubjectRulesReviewStatusToJSON(value?: V1beta1SubjectRulesReviewStatus | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'evaluationError': value.evaluationError,
        'incomplete': value.incomplete,
        'nonResourceRules': ((value.nonResourceRules as Array<any>).map(V1beta1NonResourceRuleToJSON)),
        'resourceRules': ((value.resourceRules as Array<any>).map(V1beta1ResourceRuleToJSON)),
    };
}


